package edu.ucentral.serviciosecurity.oauth;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.context.annotation.Bean;
import org.springframework.context.annotation.Configuration;
import org.springframework.security.authentication.AuthenticationManager;
import org.springframework.security.crypto.bcrypt.BCryptPasswordEncoder;
import org.springframework.security.oauth2.config.annotation.configurers.ClientDetailsServiceConfigurer;
import org.springframework.security.oauth2.config.annotation.web.configuration.AuthorizationServerConfigurerAdapter;
import org.springframework.security.oauth2.config.annotation.web.configuration.EnableAuthorizationServer;
import org.springframework.security.oauth2.config.annotation.web.configurers.AuthorizationServerEndpointsConfigurer;
import org.springframework.security.oauth2.config.annotation.web.configurers.AuthorizationServerSecurityConfigurer;
import org.springframework.security.oauth2.provider.token.store.JwtAccessTokenConverter;
import org.springframework.security.oauth2.provider.token.store.JwtTokenStore;

//Configura el servidor de autorizacion
//Se encarga del proceso del login y del control del token y valida dicho token
@Configuration
@EnableAuthorizationServer // Habilita el servidor
public class AuthorizationServerConfig extends AuthorizationServerConfigurerAdapter {

	// --------- Metodos con la anotacion @Bean de la clase UsuarioService ---------
	@Autowired
	private BCryptPasswordEncoder passwordEncoder;
	
	@Autowired
	private AuthenticationManager authenticationManager;

	//Configura permisos cada uno de los endpoints para el cliente y genera el token
	@Override
	public void configure(AuthorizationServerSecurityConfigurer security) throws Exception {
		security.tokenKeyAccess("permitAll")
		.checkTokenAccess("isAuthenticated()");
		
	}

	// Configuramos el acceso de las apps externas para que puedan consumir nuestros servicios
	@Override
	public void configure(ClientDetailsServiceConfigurer clients) throws Exception {
		clients.inMemory().withClient("angularApp")
		.secret(passwordEncoder.encode("12345"))
		.scopes("read","write")
		.authorizedGrantTypes("password","refresh_token")
		.accessTokenValiditySeconds(3600)
		.refreshTokenValiditySeconds(3600);
	}

	// ---------------------------------------------------------------------------------------
	@Override
	public void configure(AuthorizationServerEndpointsConfigurer endpoints) throws Exception {
		endpoints.authenticationManager(authenticationManager)
		.tokenStore(tokenStore())
		.accessTokenConverter(accessTokenConverter());
	}

	// Se encarga de construir el token
	@Bean
	private JwtTokenStore tokenStore() {
		return new JwtTokenStore(accessTokenConverter());
	}

	// Se encarga crear la clave secreta para la construccion del token
	@Bean
	private JwtAccessTokenConverter accessTokenConverter() {
		JwtAccessTokenConverter tokenConverter = new JwtAccessTokenConverter();
		tokenConverter.setSigningKey("valor_codigo_secreto");
		return tokenConverter;
	}

}
